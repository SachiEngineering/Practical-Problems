from enum import Enum

class TransactionStatus(Enum):
    SUCCESS = 1
    LIMIT_EXCEEDED = 2
    CARD_NOT_FOUND = 3

class CreditCard:
    def __init__(self, cardholder_name, credit_limit):
        """
        Initializes the `CreditCard` object with the cardholder's name,
        an initial balance of 0, and the given credit limit.
        """
        self.cardholder_name = cardholder_name
        self.balance = 0.0
        self.credit_limit = credit_limit

    def __str__(self) -> str:
        """
        Returns a string representation of the `CreditCard` object.
        """
        return 'CreditCard(cardholder_name=' + self.cardholder_name + ', balance=' + str(self.balance) + ', credit_limit=' + str(self.credit_limit) + ')'

    def charge(self, amount) -> str:
        """
        Adds the specified amount to the balance if it doesn't exceed the credit limit.
        If the balance plus the amount to be charged exceeds the credit limit,
        the method returns an error status.
        """
        if self.balance + amount > self.credit_limit:
            return TransactionStatus.LIMIT_EXCEEDED.name  # .name for enum
        else:
            self.balance += amount
            return TransactionStatus.SUCCESS.name

    def payment(self, amount) -> None:
        """
        Subtracts the specified amount from the balance.
        """
        self.balance -= amount

#####################################################################################################
class CardProcessor:
    def __init__(self):
        """
        Initializes the `CardProcessor` with an empty list of cards.
        """
        self.cards = []

    def issue_card(self, cardholder_name, credit_limit) -> str:
        """
        Creates a new `CreditCard` object with the given cardholder name and credit limit,
        appends it to the `cards` list, and returns a string indicating that a new card has been issued.
        """
        card = CreditCard(cardholder_name, credit_limit)
        self.cards.append(card)
        return f'New card issued to {cardholder_name} with credit limit of ${credit_limit:.2f}.'

    def charge_card(self, cardholder_name, amount) -> str:
        """
        Searches for the `CreditCard` object with the given cardholder name in the `cards` list,
        and calls its `charge` method to charge the specified amount to the card.
        If no matching card is found, the method returns an error status.
        """
        for card in self.cards:
            if card.cardholder_name == cardholder_name:
                return card.charge(amount)

        return TransactionStatus.CARD_NOT_FOUND.name

    def debit_card(self, cardholder_name, amount) -> str:
        """
        Searches for the `CreditCard` object with the given cardholder name in the `cards` list,
        and calls its `payment` method to debit the specified amount from the card.
        If no matching card is found, the method returns an error status.
        """
        for card in self.cards:
            if card.cardholder_name == cardholder_name:
                card.payment(amount)
                return TransactionStatus.SUCCESS.name
        return TransactionStatus.CARD_NOT_FOUND.name

    def get_balances(self) -> list:
        """
        Creates a list of tuples containing the cardholder name and balance for each
        `CreditCard` object in the `cards` list, and returns the list.
        """
        result = []
        for card in self.cards:
            result.append((card.cardholder_name, card.balance))
        return result

# BONUS #############################################################################################
def is_valid_card_number(card_number) -> bool:
    """
    Uses the Luhn algorithm to validate credit card numbers.
    Returns True if the number is valid according to the Luhn algorithm, and False otherwise.
    """
    card_number = str(card_number)
    total = 0

    # Reverse the card number and iterate over it
    reverse_digits = card_number[::-1]
    for i, digit in enumerate(reverse_digits):
        n = int(digit)
        # Double every second digit
        if i % 2 == 1:
            n *= 2
            # If doubling results in a number greater than 9, subtract 9 from it
            if n > 9:
                n -= 9
        total += n

    # The card number is valid if the total modulo 10 is equal to 0
    return total % 10 == 0

#####################################################################################################
# EXAMPLE(S)
# Create a new CardProcessor object
cp = CardProcessor()

# Issue a new credit card with a $1000 credit limit to John Doe
print(cp.issue_card('John Doe', 1000.00))

# Issue a new credit card with a $500 credit limit to Jane Smith
print(cp.issue_card('Jane Smith', 500.00))

# Charge $50 to John Doe's credit card
print(cp.charge_card('John Doe', 50.00))

# Attempt to charge $600 to Jane Smith's credit card (which has a $500 credit limit)
print(cp.charge_card('Jane Smith', 600.00))  # Returns an error message

# Make a $25 payment to John Doe's credit card
print(cp.debit_card('John Doe', 25.00))

# Get a list of cardholder names and balances for all credit cards issued by the CardProcessor object
print(cp.get_balances())  # Returns [('John Doe', 25.0), ('Jane Smith', 0.0)]

#####################################################################################################
# Unit tests

import unittest

class TestCardProcessor(unittest.TestCase):
    def setUp(self):
        self.processor = CardProcessor()

    def test_issue_card(self):
        result = self.processor.issue_card("John Doe", 1000)
        self.assertEqual(result, "New card issued to John Doe with credit limit of $1000.00.")
        result = self.processor.issue_card("Jane Smith", 500)
        self.assertEqual(result, "New card issued to Jane Smith with credit limit of $500.00.")
        result = self.processor.issue_card("John Doe", 2000)
        self.assertEqual(result, "New card issued to John Doe with credit limit of $2000.00.")

    def test_charge_card(self):
        self.processor.issue_card("John Doe", 1000)
        result = self.processor.charge_card("John Doe", 500)
        self.assertEqual(result, TransactionStatus.SUCCESS.name)
        result = self.processor.charge_card("John Doe", 700)
        self.assertEqual(result, TransactionStatus.LIMIT_EXCEEDED.name)
        result = self.processor.charge_card("Jane Smith", 200)
        self.assertEqual(result, TransactionStatus.CARD_NOT_FOUND.name)

    def test_debit_card(self):
        self.processor.issue_card("John Doe", 1000)
        self.processor.charge_card("John Doe", 500)
        result = self.processor.debit_card("John Doe", 200)
        self.assertEqual(result, TransactionStatus.SUCCESS.name)
        result = self.processor.debit_card("John Doe", 400)
        self.assertEqual(result, TransactionStatus.SUCCESS.name)
        result = self.processor.debit_card("Jane Smith", 100)
        self.assertEqual(result, TransactionStatus.CARD_NOT_FOUND.name)

    def test_get_balances(self):
        self.processor.issue_card("John Doe", 1000)
        self.processor.charge_card("John Doe", 500)
        self.processor.issue_card("Jane Smith", 500)
        self.processor.charge_card("Jane Smith", 100)
        balances = self.processor.get_balances()
        self.assertEqual(len(balances), 2)
        self.assertIn(("John Doe", 500.0), balances)
        self.assertIn(("Jane Smith", 100.0), balances)

#####################################################################################################
if __name__ == '__main__':
    unittest.main()
