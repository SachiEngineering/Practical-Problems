
'''
‚ùì PROMPT
You are given four arrays representing two lists of operands, one list of operators, and a list of results. For any index, i, your task is to check to see if:

operands1[i] operators[i] operands2[i] = results[i]

For input arrays arrays like:

operands1 = [1, 2]
operators = ['+', '-']
operands2 = [2, 3] 
results = [3, 0]

then the result of this function should be [true, false] since 1 + 2 = 3 and 2 - 3 ‚â† 0.

The numbers will be integers, and the signs can be "+", "-", "*", "/". Round to the nearest whole number for division.

Example(s)
Given the following:

operands1 = [1, 2]
operators = ['+', '-']
operands2 = [2, 3] 
results = [3, 0]

At index 0, we have 1 + 2 = 3. This evaluation is True
At index 1, we have 2 - 3 = 0. This evaluation is False

We should return [True, False] as there are two operands in the input list.

Another Example:
operands1_1 = [1, 5, 2]
operators_1 = ['+', '-', '*']
operands2_1 = [2, 3, 4]
results_1 = [3, 2, 8]

At index 0, we have 1 + 2 = 3. This evaluation is True
At index 1, we have 5 - 3 = 2. This evaluation is True
At index 2 we have 2 * 4 = 8. This evaluation is True

We should return [True, True, True]
 

üîé EXPLORE
List your assumptions & discoveries:
Q: Will all the input arrays be the same length?
A: Yes
Q: Are the input arrays guaranteed to be valid, or should the function handle cases where the operators are not one of the four valid operators?
A: You can assume the operators will always be valid.

Insightful & revealing test cases:
 

üß† BRAINSTORM
What approaches could work?
Algorithm 1:
Time: O(n)
Space: O(n)
 

üìÜ PLAN
Outline of algorithm #: 
Create an output list.
Loop through the list of operands and evaluate operand1 operator operand2.
Append True or False to the output list based on the result of the evaluation, if it is equal to the input results list.

'''

#üõ†Ô∏è IMPLEMENT

def check_arithmetic_expressions(operands1, operators, operands2, results):
    output = []

    for i in range(len(operands1)):
        #evaluate inputs
        if operators[i] == '/':
            actualCalc = round(operands1[i] / operands2[i])
        else:
            stringInput = str(operands1[i]) + str(operators[i]) + str(operands2[i])
            actualCalc = eval(stringInput)

        #check if result element equals the actual result
        output.append(actualCalc == results[i])

    return output

# üß™ VERIFY
# Run tests. Methodically debug & analyze issues.

# Test Case 1: Basic arithmetic operations
operands1 = [3, 5, 2, 9]
operators = ['+', '-', '*', '/']
operands2 = [2, 3, 4, 3]
results = [5, 2, 8, 3]
print(check_arithmetic_expressions(operands1, operators, operands2, results))  # Output: [True, True, True, True]

# Test Case 2: Incorrect results
operands1 = [3, 5, 2, 9]
operators = ['+', '-', '*', '/']
operands2 = [2, 3, 4, 3]
results = [6, 1, 7, 4]
print(check_arithmetic_expressions(operands1, operators, operands2, results))  # Output: [False, False, False, False]

# Test Case 3: Mixed correct and incorrect results
operands1 = [10, 15, 8, 12]
operators = ['-', '*', '+', '/']
operands2 = [5, 3, 4, 4]
results = [5, 45, 12, 2]
print(check_arithmetic_expressions(operands1, operators, operands2, results))  # Output: [True, True, True, False]

# Test Case 4: Empty arrays
operands1 = []
operators = []
operands2 = []
results = []
print(check_arithmetic_expressions(operands1, operators, operands2, results))  # Output: []

# Test Case 5: Division with rounding
operands1 = [7, 10, 15, 27]
operators = ['/', '/', '/', '/']
operands2 = [2, 3, 4, 5]
results = [4, 3, 4, 5]
print(check_arithmetic_expressions(operands1, operators, operands2, results))  # Output: [True, True, True, True]
